// Code generated by go-bindata. DO NOT EDIT.
// sources:
// faucet.html (11.229kB)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _faucetHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x5a\x7b\x73\xdb\x46\x92\xff\x5b\xfe\x14\x1d\x9c\xb5\x24\xcf\x02\x40\x49\xb6\x57\x47\x12\x4c\x79\xbd\xd9\x3d\x5f\xdd\x26\xa9\xd8\xb9\xbb\x54\x36\x75\x35\x00\x9a\xc4\x58\x83\x19\x64\x66\x40\x8a\x51\xf1\xbb\x5f\xf5\x0c\x00\x82\x0f\x29\xf6\xca\x57\xb5\xfe\x43\x06\xe6\xd1\xdd\xd3\xfd\xeb\xe9\x07\x31\xfb\xea\xcf\xdf\xbd\xfd\xf0\xd3\xf7\xdf\x40\x61\x4b\x31\x7f\x36\xa3\xff\x40\x30\xb9\x4c\x02\x94\xc1\xfc\xd9\xd9\xac\x40\x96\xcf\x9f\x9d\x9d\xcd\x4a\xb4\x0c\xb2\x82\x69\x83\x36\x09\x6a\xbb\x08\x6f\x82\xdd\x44\x61\x6d\x15\xe2\xaf\x35\x5f\x25\xc1\xff\x84\x3f\xbe\x09\xdf\xaa\xb2\x62\x96\xa7\x02\x03\xc8\x94\xb4\x28\x6d\x12\xbc\xfb\x26\xc1\x7c\x89\xbd\x7d\x92\x95\x98\x04\x2b\x8e\xeb\x4a\x69\xdb\x5b\xba\xe6\xb9\x2d\x92\x1c\x57\x3c\xc3\xd0\xbd\x5c\x00\x97\xdc\x72\x26\x42\x93\x31\x81\xc9\x65\x30\x7f\x46\x74\x2c\xb7\x02\xe7\xf7\xf7\xd1\xb7\x68\xd7\x4a\xdf\x6e\xb7\x13\x78\x53\xdb\x02\xa5\xe5\x19\xb3\x98\xc3\x5f\x58\x9d\xa1\x9d\xc5\x7e\xa5\xdb\x24\xb8\xbc\x85\x42\xe3\x22\x09\x48\x74\x33\x89\xe3\x2c\x97\x1f\x4d\x94\x09\x55\xe7\x0b\xc1\x34\x46\x99\x2a\x63\xf6\x91\xdd\xc5\x82\xa7\x26\xb6\x6b\x6e\x2d\xea\x30\x55\xca\x1a\xab\x59\x15\x5f\x47\xd7\xd1\x1f\xe3\xcc\x98\xb8\x1b\x8b\x4a\x2e\xa3\xcc\x98\x00\x34\x8a\x24\x30\x76\x23\xd0\x14\x88\x36\x80\x78\xfe\x8f\xf1\x5d\x28\x69\x43\xb6\x46\xa3\x4a\x8c\x5f\x46\x7f\x8c\xc6\x8e\x65\x7f\xf8\x71\xae\xc4\xd6\x64\x9a\x57\x16\x8c\xce\x3e\x99\xef\xc7\x5f\x6b\xd4\x9b\xf8\x3a\xba\x8c\x2e\x9b\x17\xc7\xe7\xa3\x09\xe6\xb3\xd8\x13\x9c\x3f\x89\x76\x28\x95\xdd\xc4\x57\xd1\xcb\xe8\x32\xae\x58\x76\xcb\x96\x98\xb7\x9c\x68\x2a\x6a\x07\xbf\x18\xdf\x87\x6c\xf8\xf1\xd0\x84\x5f\x82\x59\xa9\x4a\x94\x36\xfa\x68\xe2\xab\xe8\xf2\x26\x1a\xb7\x03\xc7\xf4\x1d\x03\x32\x1a\xb1\x3a\x8b\x56\xa8\x09\xb9\x22\xcc\x50\x5a\xd4\x70\x4f\xa3\x67\x25\x97\x61\x81\x7c\x59\xd8\x09\x5c\x8e\xc7\xe7\xd3\x53\xa3\xab\xc2\x0f\xe7\xdc\x54\x82\x6d\x26\xb0\x10\x78\xe7\x87\x98\xe0\x4b\x19\x72\x8b\xa5\x99\x80\xa7\xec\x26\xb6\x8e\x67\xa5\xd5\x52\xa3\x31\x0d\xb3\x4a\x19\x6e\xb9\x92\x13\x42\x14\xb3\x7c\x85\xa7\xd6\x9a\x8a\xc9\xa3\x0d\x2c\x35\x4a\xd4\x16\x0f\x04\x49\x85\xca\x6e\xfd\x98\xf3\xe6\xfe\x21\x32\x25\x94\x9e\xc0\xba\xe0\xcd\x36\x70\x8c\xa0\xd2\xd8\x90\x87\x8a\xe5\x39\x97\xcb\x09\xbc\xae\x9a\xf3\x40\xc9\xf4\x92\xcb\x09\x8c\x77\x5b\x66\x71\xab\xc6\x59\xec\x2f\xae\x67\x67\xb3\x54\xe5\x1b\x67\xc3\x9c\xaf\x20\x13\xcc\x98\x24\x38\x50\xb1\xbb\x90\xf6\x16\xd0\x3d\xc4\xb8\x6c\xa7\xf6\xe6\xb4\x5a\x07\xe0\x18\x25\x81\x17\x22\x4c\x95\xb5\xaa\x9c\xc0\x25\x89\xd7\x6c\x39\xa0\x27\x42\xb1\x0c\x2f\xaf\xda\xc9\xb3\x59\x71\xd9\x12\xb1\x78\x67\x43\x67\x9f\xce\x32\xc1\x7c\xc6\xdb\xbd\x0b\x06\x0b\x16\xa6\xcc\x16\x01\x30\xcd\x59\x58\xf0\x3c\x47\x99\x04\x56\xd7\x48\x38\xe2\x73\xe8\x5f\x7f\x0f\xdc\x7e\xc5\x65\x2b\x57\x9c\xf3\x55\x73\xac\xde\xe3\xc1\x09\x1f\x3e\xc4\x0d\x34\x0f\x6a\xb1\x30\x68\xc3\xde\x99\x7a\x8b\xb9\xac\x6a\x1b\x2e\xb5\xaa\xab\x6e\xfe\x6c\xe6\x46\x81\xe7\x49\x50\x6b\x11\x34\xd7\xbf\x7b\xb4\x9b\xaa\x51\x45\xd0\x1d\x5c\xe9\x32\x24\x4b\x68\x25\x02\xa8\x04\xcb\xb0\x50\x22\x47\x9d\x04\xef\x55\xc6\x99\x00\xe9\xcf\x0c\x3f\xfe\xf0\x9f\xd0\x98\x8c\xcb\x25\x6c\x54\xad\xe1\xdb\x6f\xfe\xeb\x6f\xc0\xf2\x9c\xa0\x1a\x45\x51\x10\xef\xa4\x70\xc0\x3d\x96\x33\x4c\xad\xdc\xc9\x7a\x36\x4b\x6b\x6b\x55\xb7\x30\xb5\x12\x52\x2b\xc3\x1c\x17\xac\x16\x16\x72\xad\xaa\x5c\xad\x65\x68\xd5\x72\x49\x61\xce\x9f\xc0\x6f\x0a\x20\x67\x96\x35\x53\x49\xd0\xae\x6d\x0d\xc8\x4c\xa5\xaa\xba\x6a\x4c\xe8\x07\xf1\xae\x62\x32\xc7\x9c\x0c\x2e\x0c\x06\xf3\xbf\xf2\x15\x42\x89\xf0\xfe\xa7\xf7\x67\x87\x68\xc8\x98\x46\x1b\xf6\x49\x1e\x61\x62\x16\x7b\x51\xfc\x81\xa0\xf9\x37\xab\x45\x4b\xa9\x3b\x40\x89\xb2\x86\xbd\xb7\x50\xd3\x95\x12\xcc\xef\xef\x35\x93\x4b\x84\xe7\x3c\xbf\xbb\x80\xe7\xac\x54\xb5\xb4\x30\x49\x20\x7a\xe3\x1e\xcd\x76\xbb\x47\x1d\x60\x26\xf8\x7c\xc6\x1e\x43\x36\x28\x99\x09\x9e\xdd\x26\x81\xe5\xa8\x93\xfb\x7b\x22\xbe\xdd\x4e\xe1\xfe\x9e\x2f\xe0\x79\xf4\x03\x66\xac\xb2\x59\xc1\xb6\xdb\xa5\x6e\x9f\x23\xbc\xc3\xac\xb6\x38\x1c\xdd\xdf\xa3\x30\xb8\xdd\x9a\x3a\x2d\xb9\x1d\xb6\xdb\x69\x5c\xe6\xdb\x2d\xc9\xdc\xc8\xb9\xdd\x42\x4c\x44\x65\x8e\x77\xf0\x3c\xfa\x1e\x35\x57\xb9\x01\xbf\x7e\x16\xb3\xf9\x2c\x16\x7c\xde\xec\xdb\x57\x52\x5c\x8b\x1d\x5a\x62\x82\x4b\x07\x71\xe7\x31\x4e\xd4\xbe\xa4\x27\x1c\x60\x19\x76\xd2\x37\x68\x30\xdc\xe2\x2d\x6e\x92\xe0\xfe\xbe\xbf\xb7\x99\xcd\x98\x10\x29\x23\xbd\xf8\xa3\x75\x9b\x7e\x43\x42\xe9\x8a\x1b\x97\x4d\xcd\x5b\x09\x76\x62\x7f\xa2\x47\x1f\xdc\x59\x56\x55\x13\xb8\xbe\xea\x5d\x58\xa7\x9c\xfd\xf5\x81\xb3\x5f\x9f\x5c\x5c\x31\x89\x02\xdc\xdf\xd0\x94\x4c\xb4\xcf\x8d\xaf\xf4\x2e\x80\xc3\x4d\x21\x5d\xcf\x9d\x68\xdd\x35\x3f\x9e\x82\x5a\xa1\x5e\x08\xb5\x9e\x00\xab\xad\x9a\x42\xc9\xee\xba\x50\x77\x3d\x1e\xf7\xe5\xa6\x2c\x90\xa5\x02\xdd\xc5\xa2\xf1\xd7\x1a\x8d\x35\xdd\x35\xe2\xa7\xdc\x5f\xba\x4d\x72\x94\x06\xf3\x03\x6d\x10\x47\x52\xad\x5b\xd5\x33\x7d\xa7\xcc\x93\xb2\x2f\x94\xea\xa2\x47\x5f\x8c\x86\x74\x2f\xd0\x05\xf3\x99\xd5\xbb\x75\x67\x33\x9b\x7f\xd6\xed\xaf\x29\xbb\x7b\xe8\xf2\xf7\xf7\x19\x9d\xbd\x42\xd4\x3e\xb5\x20\xc8\x82\x7b\x9d\xc5\x36\x7f\x02\x67\x02\x61\xca\x0c\x7e\x0a\x7b\x17\xe4\x77\xec\xdd\xeb\x53\xf9\x17\xc8\xb4\x4d\x91\xd9\x4f\x11\x60\x51\xcb\xbc\x77\xfe\xf7\x3f\xbd\x7f\x22\xf7\x5a\xf2\x15\x6a\xc3\xed\xe6\x53\xd9\x63\xbe\xe3\xef\xdf\xf7\x45\x98\xc5\x56\x3f\x0e\xb4\xfe\xcb\x17\xf2\xec\xdf\x4b\x45\xae\xe7\xff\xae\xd6\x90\x2b\x34\x60\x0b\x6e\x80\x82\xea\xd7\xb3\xb8\xb8\xee\x96\x54\xf3\x0f\x34\xe1\x82\xea\xc2\x65\x14\xc0\x0d\xe8\x5a\xba\x80\xab\x24\xd8\x02\xf7\xb3\x90\x26\x36\x47\xf0\x41\x51\x26\xb7\x42\x69\xa1\x64\x82\x67\x5c\xd5\x06\x58\x66\x95\x36\xb0\xd0\xaa\x04\xbc\x2b\x58\x6d\x2c\x11\xa2\xab\x83\xad\x18\x17\xce\x8f\x9c\x39\x41\x69\x60\x59\x56\x97\x35\x65\xa2\x72\x09\x28\x55\xbd\x2c\xc8\xb8\x60\x15\xf8\x90\x24\x94\x5c\x76\xd2\x98\x8a\x95\xc0\xac\x65\xd9\xad\xb9\x80\xf6\x3e\x00\xa6\x11\x2c\xc7\x9c\x76\x65\xaa\x2c\x95\x84\x6b\x9d\x43\xc5\xb4\xdd\x80\xd9\x4f\x28\x58\x96\xb9\xf8\x16\xc1\x1b\xb9\x51\x12\xa1\x60\x2b\x27\x1f\x7c\xf0\x35\x04\x49\xf5\x17\x96\x61\xaa\x54\xb7\x1a\x4a\xb6\x69\xd9\x35\xb2\xaf\xb9\x2d\xb8\x57\x4e\x85\xba\xa4\xad\x39\x08\x5e\x72\x6b\xa2\x59\x5c\xed\xee\xd2\x5d\x54\x16\x61\xa1\x34\xff\x8d\xb2\x19\xd1\xbf\x38\xed\xc1\xb5\xd2\xde\x8a\xce\xe4\x02\x17\x76\x02\x2f\xfd\xad\x78\x08\xe2\xa6\xec\x39\x85\xe0\x96\xa6\x2b\x27\x29\xd4\x4c\xe0\xda\xe7\xb0\x3e\x85\xc8\x6d\x4f\x82\xfc\x00\x67\x9e\xe9\xcd\x4d\x75\xd7\xc9\xd1\x25\xc2\xe3\x8e\x08\xd9\x7f\x5f\x29\x2b\xde\xa9\xf1\x02\x4a\x76\x8b\xc0\x60\xc6\x0e\xca\xe2\x46\x68\x57\x54\x71\xd7\x14\x88\xed\x1a\xd1\x7e\x4d\x7e\x9b\xfc\xe0\x09\x72\xb9\x3c\xbf\x1a\x7b\x3c\xd2\x03\x91\x3f\xbf\x1a\x73\x69\xd5\xf9\xd5\x78\x7c\x37\xfe\xc4\x7f\xe7\x57\x63\x25\xcf\xaf\xc6\xb6\xc0\xf3\xab\xf1\xf9\xd5\x75\x1f\xc9\xe7\x57\xe3\x16\xcb\x01\x58\xa6\x97\x68\x93\xe0\x7f\x59\xaa\x6a\x3b\x49\x05\x93\xb7\xc1\xdc\x49\x46\x29\x85\x33\xf8\x71\xfe\x09\x15\x33\x64\x79\x12\xcc\x81\xa1\xe9\x73\x18\x18\x9a\x5a\x6b\x55\x4b\x0a\x7b\x40\x47\x73\x5e\x28\x07\x04\x26\x3a\xff\x28\x9a\xa5\x3a\x9e\xbf\x55\xd5\x26\x74\x44\xdc\xf6\x23\x6d\x99\xba\xaa\x94\xb6\x51\x5f\x6b\x8c\x6a\x1c\x81\x26\xbe\x19\xbf\xba\x79\xfd\xa8\xe8\x86\x32\x68\x27\x7f\x27\x21\x4b\xd5\x0a\xc1\xe7\xeb\xa9\xba\x03\x26\x73\x58\x70\x8d\xc0\xd6\x6c\xf3\xd5\x2c\xce\x5d\x75\xf5\x74\x70\x2e\x1a\x27\xfa\xa7\x42\x67\xeb\xd9\x17\x50\xd5\xa9\xe0\xa6\x00\x06\x12\xd7\x30\x33\x56\x2b\xb9\x9c\xbb\xd1\x8c\xca\x4d\xf7\x0a\x95\x32\xf6\x21\xd3\x63\x99\x62\x9e\x9f\x30\xfe\x97\xb2\xfd\x7a\xbd\x8e\x5a\x2d\x3a\xc3\x17\x28\xaa\x98\x6e\xb8\x5a\x72\xbb\x89\xbd\xa7\x28\x19\x7f\xcd\xf3\xe4\xea\xe6\xea\xf5\xeb\xab\x97\xff\x76\xf3\xea\xd5\xd5\xcd\xcb\x57\x0f\xa1\x82\x0e\xf4\x44\x50\xf8\x1c\xf9\x5b\x45\xd5\x68\x97\x20\x7b\xac\xb4\x89\x19\x45\xe0\x9c\x0a\x0c\x1d\xfc\xc3\xf8\xa9\x25\x65\x19\x21\x13\x27\x13\x84\xcf\x40\x90\x83\xd0\x23\x92\x3d\x11\x56\x2d\x74\x08\x25\xaa\xb6\x74\xc2\xb6\x48\xe7\x4a\x76\x50\xba\x00\xc3\xcb\x4a\x6c\x20\xdb\x59\xfd\x18\x53\x0f\x1a\xe4\x77\x21\xb5\x6f\x32\x0f\x30\x17\xd9\x4b\x95\x23\x85\x74\x53\x9b\x0c\x2b\xd7\xb9\xa5\x40\xf9\xa7\xcd\x6f\x4c\x5a\x2e\xb1\x0d\xa8\x11\x7c\x27\xc5\x06\x6a\x83\xb0\x50\x1a\x72\x4c\xeb\xe5\xd2\xe5\x00\x1a\x2a\xcd\x57\xcc\x62\x1b\x45\x4d\x83\x88\x0e\x10\xbd\x92\x85\xd2\x19\xd1\xcb\x2e\x7e\x52\x35\x64\x4c\x82\xd5\x2c\xbb\xf5\x5e\x52\x6b\x4d\x5e\x52\xa1\x3f\x4d\x17\xc7\x53\x14\x6a\xed\x96\xf8\x73\x2f\x38\x0a\x17\xd4\x0d\x22\x14\x6a\x0d\x65\x9d\x39\x47\xa4\xa0\xed\x0e\xb1\x66\xdc\x42\x2d\x2d\x17\x5e\x97\xb6\xd6\x92\x52\x00\xdc\x0b\xc2\x47\x45\xdd\x0c\xcb\xf9\x87\x02\xbd\xea\x7b\xd9\x4e\x57\x8c\x81\xc6\xb7\x7e\x31\x54\x5a\x59\xcc\xc8\x94\xc0\x96\x8c\x4b\x43\xf6\x70\x41\x1e\xcb\x4f\x28\xd6\xba\xa7\xe6\x61\xd7\x73\x74\xd3\x71\x0c\x7f\x15\x2a\x65\x02\x56\x84\xf1\x54\x50\xa2\xa6\xa0\x50\x74\xf0\x9e\xae\x8c\x65\xb6\x36\xa0\x16\x6e\xd4\xc7\x45\xda\xbf\x62\x9a\xec\x87\x65\x65\x21\x69\x3a\x66\x34\x66\x50\xaf\x9a\x3e\x20\xbd\x52\x41\xbe\x37\xdf\xe9\x3c\x81\x9f\x7f\x99\x3e\x6b\x44\xf9\x33\x2e\x1c\x20\x08\xd9\xfe\xc8\xb6\x60\x16\x32\x8d\xcc\xa2\x81\x4c\x28\x53\x6b\x2f\x61\xae\x55\x05\x24\x65\x4b\xa9\xa5\x4c\x13\x95\xe3\xd6\x12\x19\x16\xcc\x14\xa3\xa6\xe1\xa7\xd1\xd9\xa8\x9b\x6b\xc7\xcf\x08\x73\x43\x22\xc0\x93\xf1\x14\xf8\xac\xa5\x1b\x09\x94\x4b\x5b\x4c\x81\xbf\x78\xd1\x2d\x3e\xe3\x0b\x18\xb6\x2b\x7e\xe6\xbf\x44\xf6\x2e\x22\x2e\x90\x24\xd0\xe7\xe6\x18\x36\x74\x4c\x25\x78\x86\x43\x7e\x01\x97\xa3\x69\x3b\x9b\x6a\x64\xb7\xed\x5b\x63\x47\xff\x9f\xfb\xbb\x9d\xee\x6b\xc6\x29\x7f\x4f\x37\xbe\xa4\x37\xc0\x60\xc9\x8d\x85\x5a\x0b\x68\x3c\xd8\x9b\xa0\x33\x88\x5b\xd7\xd7\xca\x11\x2a\x9b\x87\x06\x53\xed\x11\x3c\x99\xc8\xa0\xcc\x87\xff\xf1\xfe\xbb\x6f\x23\x63\x35\x97\x4b\xbe\xd8\x0c\xef\x6b\x2d\x26\xf0\x7c\x18\xfc\x4b\xad\x45\x30\xfa\x79\xfc\x4b\xb4\x62\xa2\xc6\x0b\x67\xef\x89\xfb\x7b\xc4\xe5\x02\x9a\xc7\x09\xec\x33\xdc\x8e\x46\xd3\xd3\xed\x8f\x5e\xb7\x46\xa3\x41\x3b\xa4\x85\x1d\xf0\x0f\x75\xc4\xa0\x44\x5b\x28\xe7\xb8\x1a\x33\x25\x25\x66\x16\xea\x4a\xc9\x46\x25\x20\x94\x31\x3b\x20\xb6\x2b\x92\x63\x50\x34\xeb\x13\x17\xa2\xff\x1b\xd3\xf7\x2a\xbb\x45\x3b\x1c\x0e\xd7\x5c\xe6\x6a\x1d\x09\xe5\x2f\xd9\x88\x9c\x54\x65\x4a\x40\x92\x24\xd0\xc4\xcf\x60\x04\x5f\x43\xb0\x36\x14\x49\x03\x98\xd0\x23\x3d\x8d\xe0\x05\x1c\x6e\x2f\x28\xca\xbf\x80\x20\x66\x15\x0f\x46\xde\x1d\x5a\xc5\x2b\x59\xa2\x31\x6c\x89\x7d\x01\x5d\xd1\xd3\x81\x8c\xce\x51\x9a\x25\x24\xe0\x0c\x54\x31\x6d\xd0\x2f\x89\xa8\xc8\x6e\xd1\x46\x98\x75\xcb\x92\x04\x64\x2d\xc4\x0e\xa4\xde\x29\xa6\x2d\xfc\xf6\x96\x47\x3e\xca\x7c\x95\x24\x40\x45\x27\xa9\x38\xdf\xed\x24\xe3\xfb\xda\x78\x14\x51\x54\xd8\xed\x18\x4d\xfb\x68\xde\xa3\x86\xf9\xef\x91\xc3\xfc\x90\x1e\xe6\x0f\x10\x74\xad\x88\xc7\xe8\xf9\xd6\x45\x8f\x9c\x1b\x78\x80\x9a\xac\xcb\x14\xf5\x63\xe4\x7c\x2b\xa2\x21\xe7\x54\xfd\x4e\xda\xde\xde\x0b\xb8\x7c\x3d\x7a\x80\x3a\x6a\xad\x1e\x24\x2e\x95\xdd\x0c\xef\x05\xdb\x50\xb6\x04\x03\xab\xaa\xb7\xae\x79\x30\xb8\x70\xf1\x76\x02\x1d\x85\x0b\xd7\x11\x9e\xc0\xc0\xbd\xd1\x3c\x2f\xd1\xed\x7a\x35\x1e\x8f\x2f\xa0\xfd\x1d\xe5\x4f\x8c\x9c\x50\xd7\xb8\x7d\x40\x1e\x53\x67\x19\x45\xfd\xa7\x48\xd4\xd0\xe8\x64\x6a\xde\x9f\x20\x55\x17\x1b\xf6\xc4\x82\x3f\xfc\x01\x8e\x66\xf7\x61\x1c\xc7\xf0\x37\x46\x35\xb6\x10\xae\x31\xe0\xfa\x01\xdd\xfa\x92\x1b\xe3\x2a\x6d\x03\xb9\x92\xd8\xec\xf9\xbc\x6b\xff\x48\xc6\x66\x19\xcc\x61\x7c\x28\x20\x5d\x87\xbd\xb0\x70\x22\x5a\xf4\xe8\xee\x07\x82\xb3\x6d\x9f\xdf\xde\x4e\x5e\x22\x7c\x95\x40\x10\xf4\x37\x1f\xad\xa0\x05\x1d\xb1\x33\x83\xf6\x83\xb7\xc5\xb0\x89\x8e\xa7\x62\xd7\xe8\x02\xae\xc7\xe3\xf1\xe8\x48\x88\xed\x4e\xbd\x6f\x2a\x4a\x9a\x80\xc9\x8d\xbb\x12\x3b\xdd\xba\xb4\x91\x12\x20\xba\xd2\x04\x64\x4a\x08\x9f\xb3\x34\x5b\x49\xc1\x4d\x67\x24\x81\xf0\x72\x7a\x22\x8a\xf6\x34\xd9\x3b\xda\xa1\x79\x4e\xe8\xfe\xd0\x44\xfb\x3a\x3b\x58\x1c\x5e\xee\x19\x65\xcf\x5e\xa7\x0d\x73\xd6\xc9\xcd\x77\x1a\x3d\x30\xd7\xce\x5e\x87\x3a\xeb\xc9\xef\xe9\xbc\xb8\xfc\xc4\x63\x74\xd3\x55\x6d\x8a\xe1\x81\xa0\xa3\xe9\xb1\x6d\xde\x59\xd4\x94\x23\x2b\x0a\x59\x64\x0b\x2a\x02\x34\x1e\x99\xc4\x25\xea\x1a\x43\x8d\x32\x47\xdd\xa6\x14\x3e\xaf\xa7\x04\x70\xcf\x64\xbe\x9e\xec\xc3\xa9\x77\xa2\x23\xdd\x4e\x81\xc3\x9c\xd2\x3c\xe0\x61\xd8\x3b\x8b\xcb\xcb\x94\x44\x00\x80\x03\x4f\x70\x68\xdd\x83\x2b\x2d\x46\xc1\x2a\x83\x39\x24\xe0\x7f\xdb\x1e\x8e\xa2\x5a\xf2\xbb\xe1\x28\x6c\xde\x0f\x69\xb4\xf3\xd3\xae\x4a\x6c\x65\x7f\x91\x40\x30\xb3\x1a\x78\x9e\x0c\x02\x78\x71\xca\x0f\x29\xf4\x0e\xe6\x3b\x09\xfa\x5b\x01\x66\x36\x9f\xbb\x36\xa7\x2f\xd7\xfe\x1e\xa4\x2c\xbb\x5d\xba\x5a\x68\x42\xf9\xd6\xf0\x88\x2c\x5b\x31\xcb\xb4\xa3\x3a\x9a\xc2\x6e\x79\x53\x27\x66\x64\xa1\x29\xf8\x82\xd4\x75\x53\xa1\xfb\xf9\xc1\xbd\xa5\x4a\xe7\xa8\x43\xcd\x72\x5e\x9b\x09\xbc\xac\xee\xa6\x7f\x6f\x7f\x9e\x71\x3d\xdf\x47\x45\xad\x34\xce\x8f\x24\x6a\xfa\x88\x2f\x20\x98\xc5\xb4\xe0\xf7\xc8\x74\x87\xed\xff\xa6\x0e\x27\x3a\xdb\xd0\xfd\xe2\xdd\x8c\x97\x3c\xcf\x05\x92\xc0\x3b\xf2\xe4\x91\x64\xff\xbe\x5f\xed\xb3\x84\xa6\xa5\xbd\xdb\xb3\x05\x14\x06\x1f\xd9\xd0\x75\xc7\x07\x04\x80\x90\x8e\xcc\x9d\xce\x9b\x5a\xdb\x0d\xeb\x81\xd3\x45\xf3\x85\x44\x5e\x6b\x97\x70\x0d\xc3\x06\x60\x17\x30\x30\x94\x00\xe6\x66\x30\x8a\x8a\xba\x64\x92\xff\x86\x43\x0a\x4e\x23\xaf\x2b\xd7\x6e\x0f\x8e\xef\xe5\x23\x61\x76\x7d\xf0\x41\x1b\xe8\x06\x8d\x12\x07\xad\x75\x5f\xee\x4a\xfb\x09\x8c\xa7\x83\xcf\xd4\xd0\x69\x2e\x61\xca\x34\xf4\x5f\xc2\x36\x02\x83\x56\xc4\xbd\x9d\x4b\x99\x1e\xf8\x46\x86\x4b\xd2\xa5\x5a\x27\x83\xeb\x71\x27\xa4\x37\xb4\xb3\xf3\xa0\xc1\xda\x91\x31\x48\xca\xd6\x35\xe7\x70\x3d\xfe\x12\xd2\xfa\x66\xc8\xc1\x09\xac\xe6\x15\xe6\xc0\x32\xcb\x57\xf8\xff\x70\x90\x2f\xa0\xe4\xcf\x16\x91\x70\xd8\x2a\xcf\xc1\x74\x4f\x5e\x9a\xed\x74\xfb\xaf\xe4\x6f\x10\x3b\x0d\xbf\x80\xe0\xe4\x41\x1e\x44\xe2\xc1\xc2\x03\xd7\x7e\xd8\xef\xdd\xef\x47\xc1\x61\x60\xa1\x94\xb7\xfb\xe1\x73\x14\x15\xb6\x14\xc3\x60\x66\xdd\xb7\x2f\x24\x73\x47\xc1\x11\xf0\xc3\xfb\x79\xdd\x76\xbf\x9a\xa1\x22\x1e\x0f\x8a\x2d\xe8\x65\x28\x5d\x41\xd6\xa6\x23\xb0\xdd\x7d\x22\x14\xc7\xf0\xde\x32\x6d\x81\xc1\x8f\xef\xa0\xae\x72\x66\x29\x84\x29\xa0\x20\xe9\x7f\x0c\x69\xbf\x21\x4a\x99\x36\xb0\x50\x7a\xcd\x74\xde\xb4\x68\x6c\x81\x1b\xf7\x63\x4d\x9b\xff\x19\xb4\xef\xe8\x16\x5b\x31\x31\x3c\x2a\xfe\x9e\x0f\x07\x51\xdf\xe4\x83\x51\x84\x2c\x2b\x8e\x17\xba\x88\xd5\xf1\x4d\xe0\x5b\x57\x07\x0c\x9f\x0f\x6d\xc1\xcd\x28\x62\xd6\xea\xe1\x60\x0f\x0c\x83\x11\xd9\xf5\xb2\x57\x97\x75\xdb\x67\x7b\x6e\xf5\x18\x8d\x5d\x46\xdd\x65\x03\xed\xf2\xcc\x98\xa1\xc7\xd5\xe0\xa2\x47\x7b\x1f\x56\x83\xf3\x41\x67\xa8\x9d\x7b\xef\xce\x91\x9c\x94\x64\x8f\xf4\x80\xbc\x6c\x70\xc4\x9e\xe5\xf9\x5b\xf2\x9f\x61\x70\xc2\xd3\x0f\xd1\x31\xea\x94\xed\xef\xeb\x47\xb5\xec\x3f\xb9\x78\x40\xc5\x3c\x1f\x8c\x22\x53\xa7\xbe\x41\x31\x7c\xd5\x55\x61\xed\x32\x07\xde\xc3\x50\x70\x94\x50\x10\x8b\xfd\xa4\x22\x3c\x48\x42\x1e\x89\x1a\x0d\x4b\x7f\xaa\xed\x05\x29\x7c\x3c\xea\xfa\x5b\xdf\x18\xca\xb0\x7c\xd7\x7f\x8d\xa9\x71\xed\x04\x68\xf0\xee\x5a\x3a\xbe\x75\xf3\xe6\xfb\x77\xbd\xf6\x4d\xe7\x11\x43\x47\xbd\xfb\xbc\xef\x54\xb3\xe4\xe4\xf7\x84\xeb\xf5\x3a\x5a\x2a\xb5\x14\xfe\x4b\xc2\xae\x9b\x12\xb3\x8a\x47\x1f\x4d\x00\xcc\x6c\x64\x06\x39\x2e\x50\xcf\x7b\xe4\x9b\x16\xcb\x2c\xf6\x5f\xba\xcd\x62\xff\x31\xef\xff\x05\x00\x00\xff\xff\x43\x29\x71\xd8\xdd\x2b\x00\x00")

func faucetHtmlBytes() ([]byte, error) {
	return bindataRead(
		_faucetHtml,
		"faucet.html",
	)
}

func faucetHtml() (*asset, error) {
	bytes, err := faucetHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "faucet.html", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x17, 0xff, 0xeb, 0x9d, 0x34, 0x74, 0x27, 0x6e, 0x79, 0x47, 0x13, 0x58, 0x2f, 0x10, 0xba, 0x32, 0xea, 0x60, 0x50, 0x56, 0x56, 0x56, 0xdc, 0x8f, 0xcc, 0xdc, 0xdb, 0x1e, 0x1a, 0x70, 0x96, 0xc2}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"faucet.html": faucetHtml,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"faucet.html": {faucetHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
